- name: Get ArgoCD web UI password
  shell: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 --decode
  register: argocd_password
  until: argocd_password.stdout|length > 0
  retries: 10
  delay: 10

- name: Get ArgoCD server pod
  shell: kubectl -n argocd get pods -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].metadata.name}'
  register: argocd_pod_name

- name: Download argocd-linux-arm64 binary
  get_url:
    url: "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-arm64"
    dest: "/tmp/argocd-linux-arm64"
    mode: "0555"
  when: ansible_architecture == "aarch64"

- name: Install argocd-linux-arm64 binary
  ansible.builtin.copy:
    src: "/tmp/argocd-linux-arm64"
    dest: "/usr/local/bin/argocd"
    mode: "0555"
    remote_src: yes
  when: ansible_architecture == "aarch64"
- name: Remove argocd-linux-arm64 binary from /tmp
  ansible.builtin.file:
    path: "/tmp/argocd-linux-arm64"
    state: absent
  when: ansible_architecture == "aarch64"

- name: Download argocd-linux-amd64 binary
  get_url:
    url: "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
    dest: "/tmp/argocd-linux-amd64"
    mode: "0555"
  when: ansible_architecture == "x86_64"

- name: Install argocd-linux-amd64 binary
  ansible.builtin.copy:
    src: "/tmp/argocd-linux-amd64"
    dest: "/usr/local/bin/argocd"
    mode: "0555"
    remote_src: yes
  when: ansible_architecture == "x86_64"
- name: Remove argocd-linux-amd64 binary from /tmp
  ansible.builtin.file:
    path: "/tmp/argocd-linux-amd64"
    state: absent
  when: ansible_architecture == "x86_64"

- name: Ensure the SSH key is present on the host
  copy:
    src: "{{ playbook_dir }}/files/argocd_key"
    dest: "/root/argocd_key"
    mode: "0600"


- name: Start port forwarding
  ansible.builtin.shell:
    cmd: kubectl port-forward svc/argocd-server -n argocd 8080:443
  async: 300
  poll: 0
  register: port_forward_task

- name: Wait for port forwarding to start
  ansible.builtin.pause:
    seconds: 5

- name: Login to ArgoCD
  ansible.builtin.shell:
    cmd: >
      argocd --insecure --grpc-web login localhost:8080
      --username admin --password "{{ argocd_password.stdout }}"
  register: argocd_login

- name: "Add repo: {{ git_repo }}"
  ansible.builtin.shell:
    cmd: >
      argocd --insecure --grpc-web --server localhost:8080 repo add {{ git_repo }}
      --name k8s-homelab --type git --port-forward-namespace argocd
      --ssh-private-key-path=/root/argocd_key --insecure-ignore-host-key
  register: argocd_repo
  until: argocd_repo.rc == 0
  retries: 10
  delay: 10

# - name: Stop port forwarding
#   shell:
#     cmd: "kill -9 {{ port_forward_task.ansible_job_id }}"

#- name: Enable Helm deployment
#  ansible.builtin.shell:
#    cmd: >
#      kubectl patch configmap argocd-cm -n argocd --type='strategic' -p '{"data": {"configManagementPlugins": "- name: kustomize-enable-helm\n  generate:\n    command: [\"sh\", \"-c\"]\n    args: [\"kustomize #build --enable-helm\"]", "kustomizeBuildOptions": "--enable-helm"}}'

- name: Get the argocd-server pod name
  shell: kubectl -n argocd get pods -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].metadata.name}'
  register: argocd_server_pod

- name: Restart argocd-server
  shell: kubectl -n argocd delete pod "{{ argocd_server_pod.stdout }}"

- name: Copy ApplicationSet
  template:
    src: "{{ playbook_dir }}/files/applicationset.yml.j2"
    dest: "/root/applicationset.yml"
    mode: "0555"

- name: Deploy ApplicationSet
  ansible.builtin.shell:
    cmd: kubectl apply -f /root/applicationset.yml

- name: Wait for argocd-server to be ready
  command: kubectl -n argocd wait --for=condition=ready --timeout=300s pod -l app.kubernetes.io/name=argocd-server

- name: Print ArgoCD web UI password
  debug:
    msg: >
      Cluster deployment has completed!
      ArgoCD admin password: {{ argocd_password.stdout }}"
